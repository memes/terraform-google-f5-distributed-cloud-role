# frozen_string_literal: true

EXPECTED_PROJECT_PERMISSIONS = [
  'compute.addresses.create',
  'compute.addresses.createInternal',
  'compute.addresses.delete',
  'compute.addresses.deleteInternal',
  'compute.addresses.get',
  'compute.addresses.list',
  'compute.addresses.use',
  'compute.addresses.useInternal',
  'compute.backendServices.create',
  'compute.backendServices.delete',
  'compute.backendServices.get',
  'compute.backendServices.list',
  'compute.disks.create',
  'compute.disks.delete',
  'compute.disks.get',
  'compute.disks.list',
  'compute.disks.resize',
  'compute.disks.setLabels',
  'compute.firewalls.create',
  'compute.firewalls.delete',
  'compute.firewalls.get',
  'compute.firewalls.list',
  'compute.firewalls.update',
  'compute.forwardingRules.create',
  'compute.forwardingRules.delete',
  'compute.forwardingRules.get',
  'compute.forwardingRules.list',
  'compute.forwardingRules.setLabels',
  'compute.globalOperations.get',
  'compute.healthChecks.create',
  'compute.healthChecks.delete',
  'compute.healthChecks.get',
  'compute.healthChecks.list',
  'compute.healthChecks.useReadOnly',
  'compute.images.create',
  'compute.images.get',
  'compute.images.list',
  'compute.images.useReadOnly',
  'compute.instanceGroupManagers.create',
  'compute.instanceGroupManagers.delete',
  'compute.instanceGroupManagers.get',
  'compute.instanceGroupManagers.list',
  'compute.instanceGroupManagers.update',
  'compute.instanceGroups.create',
  'compute.instanceGroups.delete',
  'compute.instanceGroups.get',
  'compute.instanceGroups.list',
  'compute.instanceGroups.use',
  'compute.instanceTemplates.create',
  'compute.instanceTemplates.delete',
  'compute.instanceTemplates.get',
  'compute.instanceTemplates.list',
  'compute.instanceTemplates.useReadOnly',
  'compute.instances.attachDisk',
  'compute.instances.create',
  'compute.instances.delete',
  'compute.instances.deleteAccessConfig',
  'compute.instances.detachDisk',
  'compute.instances.get',
  'compute.instances.list',
  'compute.instances.reset',
  'compute.instances.resume',
  'compute.instances.setLabels',
  'compute.instances.setMachineResources',
  'compute.instances.setMachineType',
  'compute.instances.setMetadata',
  'compute.instances.setServiceAccount',
  'compute.instances.setTags',
  'compute.instances.start',
  'compute.instances.stop',
  'compute.instances.update',
  'compute.instances.updateAccessConfig',
  'compute.instances.updateNetworkInterface',
  'compute.instances.use',
  'compute.interconnectAttachments.get',
  'compute.machineTypes.get',
  'compute.machineTypes.list',
  'compute.networkEndpointGroups.attachNetworkEndpoints',
  'compute.networks.access',
  'compute.networks.create',
  'compute.networks.delete',
  'compute.networks.get',
  'compute.networks.list',
  'compute.networks.update',
  'compute.networks.updatePolicy',
  'compute.networks.use',
  'compute.networks.useExternalIp',
  'compute.projects.get',
  'compute.regionBackendServices.create',
  'compute.regionBackendServices.delete',
  'compute.regionBackendServices.get',
  'compute.regionBackendServices.list',
  'compute.regionBackendServices.use',
  'compute.regionOperations.get',
  'compute.regions.get',
  'compute.routers.get',
  'compute.routes.create',
  'compute.routes.delete',
  'compute.routes.get',
  'compute.routes.list',
  'compute.subnetworks.create',
  'compute.subnetworks.delete',
  'compute.subnetworks.get',
  'compute.subnetworks.list',
  'compute.subnetworks.setPrivateIpGoogleAccess',
  'compute.subnetworks.update',
  'compute.subnetworks.use',
  'compute.subnetworks.useExternalIp',
  'compute.zones.get',
  'iam.serviceAccounts.actAs',
  'iam.serviceAccounts.get',
  'iam.serviceAccounts.list',
  'resourcemanager.projects.get',
  # @memes added 3/29/24
  'compute.projects.get'
].sort!.freeze

EXPECTED_ORG_PERMISSIONS = [
  'compute.addresses.create',
  'compute.addresses.createInternal',
  'compute.addresses.delete',
  'compute.addresses.deleteInternal',
  'compute.addresses.get',
  'compute.addresses.list',
  'compute.addresses.use',
  'compute.addresses.useInternal',
  'compute.backendServices.create',
  'compute.backendServices.delete',
  'compute.backendServices.get',
  'compute.backendServices.list',
  'compute.disks.create',
  'compute.disks.delete',
  'compute.disks.get',
  'compute.disks.list',
  'compute.disks.resize',
  'compute.disks.setLabels',
  'compute.firewalls.create',
  'compute.firewalls.delete',
  'compute.firewalls.get',
  'compute.firewalls.list',
  'compute.firewalls.update',
  'compute.forwardingRules.create',
  'compute.forwardingRules.delete',
  'compute.forwardingRules.get',
  'compute.forwardingRules.list',
  'compute.forwardingRules.setLabels',
  'compute.globalOperations.get',
  'compute.healthChecks.create',
  'compute.healthChecks.delete',
  'compute.healthChecks.get',
  'compute.healthChecks.list',
  'compute.healthChecks.useReadOnly',
  'compute.images.create',
  'compute.images.get',
  'compute.images.list',
  'compute.images.useReadOnly',
  'compute.instanceGroupManagers.create',
  'compute.instanceGroupManagers.delete',
  'compute.instanceGroupManagers.get',
  'compute.instanceGroupManagers.list',
  'compute.instanceGroupManagers.update',
  'compute.instanceGroups.create',
  'compute.instanceGroups.delete',
  'compute.instanceGroups.get',
  'compute.instanceGroups.list',
  'compute.instanceGroups.use',
  'compute.instanceTemplates.create',
  'compute.instanceTemplates.delete',
  'compute.instanceTemplates.get',
  'compute.instanceTemplates.list',
  'compute.instanceTemplates.useReadOnly',
  'compute.instances.attachDisk',
  'compute.instances.create',
  'compute.instances.delete',
  'compute.instances.deleteAccessConfig',
  'compute.instances.detachDisk',
  'compute.instances.get',
  'compute.instances.list',
  'compute.instances.reset',
  'compute.instances.resume',
  'compute.instances.setLabels',
  'compute.instances.setMachineResources',
  'compute.instances.setMachineType',
  'compute.instances.setMetadata',
  'compute.instances.setServiceAccount',
  'compute.instances.setTags',
  'compute.instances.start',
  'compute.instances.stop',
  'compute.instances.update',
  'compute.instances.updateAccessConfig',
  'compute.instances.updateNetworkInterface',
  'compute.instances.use',
  'compute.interconnectAttachments.get',
  'compute.machineTypes.get',
  'compute.machineTypes.list',
  'compute.networkEndpointGroups.attachNetworkEndpoints',
  'compute.networks.access',
  'compute.networks.create',
  'compute.networks.delete',
  'compute.networks.get',
  'compute.networks.list',
  'compute.networks.update',
  'compute.networks.updatePolicy',
  'compute.networks.use',
  'compute.networks.useExternalIp',
  'compute.projects.get',
  'compute.regionBackendServices.create',
  'compute.regionBackendServices.delete',
  'compute.regionBackendServices.get',
  'compute.regionBackendServices.list',
  'compute.regionBackendServices.use',
  'compute.regionOperations.get',
  'compute.regions.get',
  'compute.routers.get',
  'compute.routes.create',
  'compute.routes.delete',
  'compute.routes.get',
  'compute.routes.list',
  'compute.subnetworks.create',
  'compute.subnetworks.delete',
  'compute.subnetworks.get',
  'compute.subnetworks.list',
  'compute.subnetworks.setPrivateIpGoogleAccess',
  'compute.subnetworks.update',
  'compute.subnetworks.use',
  'compute.subnetworks.useExternalIp',
  'compute.zones.get',
  'iam.serviceAccounts.actAs',
  'iam.serviceAccounts.get',
  'iam.serviceAccounts.list',
  'resourcemanager.projects.get',
  'resourcemanager.projects.list',
  # @memes added 3/29/24
  'compute.projects.get'
].sort!.freeze

control 'project_role' do
  title 'Verify F5 Distributed Cloud custom role with project scope'
  impact 1.0

  role_id = input('output_role_id')

  params = role_id.match(%r{^projects/(?<project>[^/]+)/roles/(?<name>.+)$}).named_captures
  role = google_project_iam_custom_role(project: params['project'], name: params['name'])
  describe role do
    it { should exist }
    its('included_permissions') { should cmp EXPECTED_PROJECT_PERMISSIONS }
  end
end

control 'org_role' do
  title 'Verify F5 Distributed Cloud custom role with org scope'
  impact 1.0

  role_id = input('output_role_id')

  params = role_id.match(%r{^organizations/(?<org>[^/]+)/roles/(?<name>.+)$}).named_captures
  role = google_iam_organization_custom_role(org_id: params['org'], name: params['name'])
  describe role do
    it { should exist }
    its('included_permissions') { should cmp EXPECTED_ORG_PERMISSIONS }
  end
end
